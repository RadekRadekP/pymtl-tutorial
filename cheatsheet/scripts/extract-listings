#!/usr/bin/env python
#=========================================================================
# extract-listings [options] <tex-files>
#=========================================================================
#
#  -h --help     Display this message
#  -v --verbose  Verbose mode
#
# Create a harness suitable for distribution to students.
#
# Author : Christopher Batten
# Date   : August 30, 2012
#

import argparse
import sys
import re
import os
import sys
import shutil
import glob

#-------------------------------------------------------------------------
# Command line processing
#-------------------------------------------------------------------------

class ArgumentParserWithCustomError(argparse.ArgumentParser):
  def error( self, msg = "" ):
    if ( msg ): print("\n ERROR: %s" % msg)
    print("")
    file = open( sys.argv[0] )
    for ( lineno, line ) in enumerate( file ):
      if ( line[0] != '#' ): sys.exit(msg != "")
      if ( (lineno == 2) or (lineno >= 4) ): print( line[1:].rstrip("\n") )

def parse_cmdline():
  p = ArgumentParserWithCustomError( add_help=False )
  p.add_argument( "-v", "--verbose", action="store_true" )
  p.add_argument( "-h", "--help",    action="store_true" )
  p.add_argument( "tex_files", nargs='+' )
  opts = p.parse_args()
  if opts.help: p.error()
  return opts

#-------------------------------------------------------------------------
# Verbose print
#-------------------------------------------------------------------------

verbose = False
def vprint( msg, value=None ):
  if verbose:
    if value != None:
      print msg, value
    else:
      print msg

#-------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------

def main():
  opts = parse_cmdline()

  global verbose
  verbose = opts.verbose

  vprint("")
  for file in opts.tex_files:

    vprint( " - scanning", file )

    scan_for_begin_listing  = True
    scan_for_end_listing    = False
    scan_for_github         = False

    harness_dir = "y"
    out_file    = None

    for line in open( file ):

      sline = line.strip()

      if scan_for_github and sline.startswith("\\url{https://github.com"):
        scan_for_begin_listing = False
        scan_for_end_listing   = False
        scan_for_github        = False
        vprint( "    + extracting listing" )
        out_file_name = sline.strip("}}").split("/")[-1]
        shutil.move( harness_dir+"/.temp", harness_dir+"/"+out_file_name )

      elif scan_for_end_listing:
        if sline.startswith("\\end{lstlisting}"):
          scan_for_begin_listing = False
          scan_for_end_listing   = False
          scan_for_github        = True
          out_file.write( "\n" )
          out_file.close()
        else:
          out_file.write( line )

      elif scan_for_begin_listing and sline.startswith("\\begin{lstlisting}"):
        scan_for_begin_listing = False
        scan_for_end_listing   = True
        scan_for_github        = False
        out_file = open( harness_dir+"/.temp", "w" )

  shutil.rmtree( harness_dir+"/.temp", ignore_errors=True )
  vprint("")

main()

